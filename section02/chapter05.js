// 원시타입 vs 객체타입
// 1. 원시타입
// Number, String Boolean 등
// 값 자체로써 변수에 저장되고 복사횐다
// 불변값이다 (메모리 값 수정 X);

// 2. 객체타입
// Ojbect Attry.Function 등
// 참조값을 통해 변수에 저장되고 복사된다
// 가변값이다 (메모리 값 수정 O)

// !객체타입 주의사항
// 1. 의도치 않게 값이 수정될 수 있다. (... 같은 스프레드 연산자를 이용해서 해결하기도 함)
let o1 = { name : "홍길동" };
let o2 = o1; // -> 얕은복사. 객체의 참조값을 복사함. 원본 객체가 수정될 수 있어 위험함.
let o3 = { ...o1 }; // -> 깊은복사. 새로운 객체를 생성함녀서 프로퍼티만 따로 복사함. 원본 객체가 수정될 일이 없어 안전함.

// 2. 객체간의 비교는 기본적으로 참조값을 기준으로 이루어진다.
o1 === o2; // -> 얕은비교. 참조값을 기준으로 비교
JSON.stringify(o1) === JSON.stringify(o2); // 깊은비교. 객체를 문자열로 변환하여 비교. JSON.stringify 등의 내장 함수를 이용해야 함.

// 3. 배열과 함수도 사실 객체이다.